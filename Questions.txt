Binary Search
Q 1 -> Given a matrix of size nxm containing -ve & +ve integers, but theres a catch... all the -ve nums are on one side
        and all the +ve nums are on the other side... they are not shuffled... Do this in O(nlogm);

        eg
                {4, 1, 6, -2, -1
                -1, -2, -6, 2, 4
                8, 9, 10, 11, -6
                -1, -3, -4, -8, -10
                8, 6, 7, 3, 4}
                

Q 2 -> Given a nxm grid containing soldiers (1) and civilians (0), We have to tell which village is the safest int that grid.

        
        eg
                {1, 1, 0, 0, 0
                 1, 1, 0, 0, 0
                 1, 1, 1, 1, 0
                 1, 1, 0, 0, 0
                 0, 0, 0, 0, 0}

            Here the safest village is at the third number [1, 1, 1, 1, 0] becuase it has the highest number of soldiers.


DP (Subset Sum)
Q 3 -> Given a array machine[] = [8, 5, 3, 1, 2] and target = 12 tell what will be the count of minimum exercises done completing the target,
        and you can do one exercise atmost 2 times.


Kadane's Algorithm
Q 4 -> You are in a game where N enemies stand in a straight line. You have a strength K and must choose a group of consecutive enemies to fight.
        If an enemy is weaker, you gain points equal to the strength difference; if stronger, you lose points. Find the max. points you can earn.
        arr = [6, 11, 4, 9, 3, 8], K = 7

        find the diff. of each element with k and over-write in array
        arr = [1, -4, 3, -2, 4, -1]
        Now find Maximum Sum Subarray.

        

Greedy Algorithm
Q 5 -> You have multiple containers, each with a given capacity (in liters) and height (in mm). You can fill these containers up to a given maximum             total quantity and are allowed to take a fraction of any containerâ€™s capacity.

        Your goal is to maximize the total height achieved by optimally selecting and filling the containers.

        Given:

        The capacity and height of each container.
         The maximum total quantity you can use.

        Find: The maximum possible height you can achieve.


DP on Strings
Successor Find kro --> LCS nikalo of s1 and s2 and s2.length - lcs(length) --> ans
